name: Deploy to Hugging Face Spaces

on:
  push:
    branches: [ main, master ]
  workflow_dispatch:
    inputs:
      jwt_token_1:
        description: 'JWT Token 1'
        required: false
        type: string
      jwt_token_2:
        description: 'JWT Token 2'
        required: false
        type: string
      jwt_token_3:
        description: 'JWT Token 3'
        required: false
        type: string
      jwt_token_4:
        description: 'JWT Token 4'
        required: false
        type: string
      jwt_token_5:
        description: 'JWT Token 5'
        required: false
        type: string

jobs:
  deploy-to-huggingface:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Read version from file
      id: version
      run: echo "VERSION=$(cat version.txt | grep version= | cut -d= -f2)" >> $GITHUB_OUTPUT

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install huggingface_hub
        pip install -r requirements.txt

    - name: Create Hugging Face Space structure
      run: |
        mkdir -p huggingface-space
        
        # Copy application files
        cp main.py huggingface-space/
        cp requirements.txt huggingface-space/
        cp models.json huggingface-space/ || echo "models.json not found, skipping"
        
        # Create README for Hugging Face Space
        cat > huggingface-space/README.md << 'EOF'
        ---
        title: JetBrains AI API
        emoji: 🚀
        colorFrom: blue
        colorTo: purple
        sdk: docker
        pinned: false
        license: mit
        app_port: 8000
        ---

        # JetBrains AI API

        This is a JetBrains AI API service deployed on Hugging Face Spaces.

        ## Features

        - OpenAI and Anthropic API compatibility
        - JWT token authentication
        - Multiple model support
        - Environment variable configuration

        ## Configuration

        Configure your JWT tokens and API keys through the Hugging Face Spaces secrets:

        **推荐方式（逗号分隔格式）**：
        - `JWT_TOKEN`: 多个JWT令牌，使用逗号分隔，如：`token1,token2,token3`
        - `CLIENT_API_KEYS`: 多个客户端API密钥，使用逗号分隔

        **备选方式（分别配置）**：
        - `JWT_TOKEN_1` - `JWT_TOKEN_5`: 单独配置每个JWT令牌

        ## Usage

        Once deployed, the API will be available at your Hugging Face Space URL on port 8000.

        ## Version

        Version: ${{ steps.version.outputs.VERSION }}
        EOF

    - name: Create startup script
      run: |
        cat > huggingface-space/start.sh << 'EOF'
        #!/bin/bash
        # Start the application (main.py now handles environment variables directly)
        python main.py
        EOF
        chmod +x huggingface-space/start.sh

    - name: Create Hugging Face Dockerfile
      run: |
        cat > huggingface-space/Dockerfile << 'EOF'
        FROM python:3.11-slim

        WORKDIR /app

        # Install system dependencies
        RUN apt-get update && apt-get install -y \
            gcc \
            curl \
            && rm -rf /var/lib/apt/lists/*

        # Copy requirements and install Python dependencies
        COPY requirements.txt .
        RUN pip install --no-cache-dir -r requirements.txt

        # Copy application files
        COPY main.py .
        COPY start.sh .
        COPY models.json* ./

        # Create a non-root user and set permissions
        RUN useradd -m -u 1000 appuser && \
            chown -R appuser:appuser /app && \
            chmod +x start.sh

        # Switch to non-root user
        USER appuser

        # Expose port
        EXPOSE 8000

        # Set environment variables
        ENV PYTHONUNBUFFERED=1
        ENV DEBUG_MODE=false

        # Health check (using a simple Python script since /health endpoint may not exist)
        HEALTHCHECK --interval=30s --timeout=10s --start-period=40s --retries=3 \
            CMD python -c "import urllib.request; urllib.request.urlopen('http://localhost:8000/v1/models')" || exit 1

        # Start the application
        CMD ["./start.sh"]
        EOF

    - name: Deploy to Hugging Face Spaces
      env:
        HF_TOKEN: ${{ secrets.HF_TOKEN }}
        SPACE_NAME: ${{ secrets.HF_SPACE_NAME }}
      run: |
        if [ -z "$HF_TOKEN" ]; then
          echo "❌ HF_TOKEN secret not set. Please add your Hugging Face token to repository secrets."
          exit 1
        fi
        
        if [ -z "$SPACE_NAME" ]; then
          echo "❌ HF_SPACE_NAME secret not set. Please set your desired space name (e.g., username/jetbrainsai-api)."
          exit 1
        fi
        
        cd huggingface-space
        
        # Login to Hugging Face
        python -c "
        from huggingface_hub import HfApi
        import os
        
        api = HfApi()
        
        try:
            # Create or update the space
            api.create_repo(
                repo_id=os.environ['SPACE_NAME'],
                repo_type='space',
                space_sdk='docker',
                exist_ok=True,
                token=os.environ['HF_TOKEN']
            )
            print('✅ Space created/updated successfully')
            
            # Upload files
            api.upload_folder(
                folder_path='.',
                repo_id=os.environ['SPACE_NAME'],
                repo_type='space',
                token=os.environ['HF_TOKEN']
            )
            print('✅ Files uploaded successfully')
            
        except Exception as e:
            print(f'❌ Error: {e}')
            exit(1)
        "
        
        echo "🚀 Deployment completed!"
        echo "Your space will be available at: https://huggingface.co/spaces/$SPACE_NAME"
        echo ""
        echo "📝 Don't forget to configure secrets in your Hugging Face Space:"
        echo "   推荐方式："
        echo "   - JWT_TOKEN=token1,token2,token3"
        echo "   - CLIENT_API_KEYS=sk-key1,sk-key2,sk-key3"
        echo "   备选方式："
        echo "   - JWT_TOKEN_1 through JWT_TOKEN_5"