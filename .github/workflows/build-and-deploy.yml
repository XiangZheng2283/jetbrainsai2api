name: Build and Deploy Docker Image

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:
    inputs:
      jwt_token_1:
        description: 'JWT Token 1'
        required: false
        type: string
      jwt_token_2:
        description: 'JWT Token 2'
        required: false
        type: string
      jwt_token_3:
        description: 'JWT Token 3'
        required: false
        type: string
      jwt_token_4:
        description: 'JWT Token 4'
        required: false
        type: string
      jwt_token_5:
        description: 'JWT Token 5'
        required: false
        type: string

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata (tags, labels) for Docker
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Generate deployment script
      run: |
        cat > deploy.sh << 'EOF'
        #!/bin/bash
        
        # 停止并移除现有容器
        docker stop jetbrainsai2api || true
        docker rm jetbrainsai2api || true
        
        # 拉取最新镜像
        docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
        
        # 运行新容器
        docker run -d \
          --name jetbrainsai2api \
          -p 8000:8000 \
          --restart unless-stopped \
          -e JWT_TOKEN_1="${JWT_TOKEN_1:-}" \
          -e JWT_TOKEN_2="${JWT_TOKEN_2:-}" \
          -e JWT_TOKEN_3="${JWT_TOKEN_3:-}" \
          -e JWT_TOKEN_4="${JWT_TOKEN_4:-}" \
          -e JWT_TOKEN_5="${JWT_TOKEN_5:-}" \
          -e DEBUG_MODE="${DEBUG_MODE:-false}" \
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
        
        echo "部署完成！"
        echo "API 端点: http://localhost:8000"
        echo "查看日志: docker logs -f jetbrainsai2api"
        EOF
        
        chmod +x deploy.sh

    - name: Upload deployment script
      uses: actions/upload-artifact@v4
      with:
        name: deployment-script
        path: deploy.sh

  create-release:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
    permissions:
      contents: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Download deployment script
      uses: actions/download-artifact@v4
      with:
        name: deployment-script

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ github.run_number }}
        release_name: Release v${{ github.run_number }}
        body: |
          ## 🚀 新版本发布
          
          ### 更新内容
          - 构建时间: ${{ github.event.head_commit.timestamp }}
          - 提交信息: ${{ github.event.head_commit.message }}
          - 提交者: ${{ github.event.head_commit.author.name }}
          
          ### 🐳 Docker镜像
          ```bash
          docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          ```
          
          ### 📦 快速部署
          1. 下载 deploy.sh 脚本
          2. 设置环境变量:
             ```bash
             export JWT_TOKEN_1="your-jwt-token-1"
             export JWT_TOKEN_2="your-jwt-token-2"
             # ... 更多tokens
             ```
          3. 运行部署脚本:
             ```bash
             chmod +x deploy.sh
             ./deploy.sh
             ```
          
          ### 🔧 手动部署
          ```bash
          docker run -d \
            --name jetbrainsai2api \
            -p 8000:8000 \
            --restart unless-stopped \
            -e JWT_TOKEN_1="your-jwt-token-1" \
            -e JWT_TOKEN_2="your-jwt-token-2" \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          ```
        draft: false
        prerelease: false

    - name: Upload deployment script to release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./deploy.sh
        asset_name: deploy.sh
        asset_content_type: application/x-sh