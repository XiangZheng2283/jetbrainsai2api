name: Build and Deploy Docker Image

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:
    inputs:
      jwt_token_1:
        description: 'JWT Token 1'
        required: false
        type: string
      jwt_token_2:
        description: 'JWT Token 2'
        required: false
        type: string
      jwt_token_3:
        description: 'JWT Token 3'
        required: false
        type: string
      jwt_token_4:
        description: 'JWT Token 4'
        required: false
        type: string
      jwt_token_5:
        description: 'JWT Token 5'
        required: false
        type: string

env:
  REGISTRY: ghcr.io

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Extract repository info and lowercase name
      run: |
        echo "IMAGE_NAME=${GITHUB_REPOSITORY@L}" >> ${GITHUB_ENV}
        echo "REPO_OWNER=${GITHUB_REPOSITORY_OWNER@L}" >> ${GITHUB_ENV}
        echo "REPO_NAME=${GITHUB_REPOSITORY#*/}" >> ${GITHUB_ENV}

    - name: Read version from file
      id: version
      run: echo "VERSION=$(cat version.txt | grep version= | cut -d= -f2)" >> $GITHUB_OUTPUT

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata (tags, labels) for Docker
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
          type=raw,value=v${{ steps.version.outputs.VERSION }}
          type=raw,value=${{ steps.version.outputs.VERSION }}

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          VERSION=${{ steps.version.outputs.VERSION }}
          BUILD_DATE=${{ github.event.head_commit.timestamp }}
          VCS_REF=${{ github.sha }}

    - name: Generate deployment script
      run: |
        cat > deploy.sh << 'EOF'
        #!/bin/bash
        
        # 停止并移除现有容器
        docker stop jetbrainsai2api || true
        docker rm jetbrainsai2api || true
        
        # 拉取最新镜像
        docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
        
        # 运行新容器
        docker run -d \
          --name jetbrainsai2api \
          -p 8000:8000 \
          --restart unless-stopped \
          -e JWT_TOKEN_1="${JWT_TOKEN_1:-}" \
          -e JWT_TOKEN_2="${JWT_TOKEN_2:-}" \
          -e JWT_TOKEN_3="${JWT_TOKEN_3:-}" \
          -e JWT_TOKEN_4="${JWT_TOKEN_4:-}" \
          -e JWT_TOKEN_5="${JWT_TOKEN_5:-}" \
          -e OPENAI_API_KEY="${OPENAI_API_KEY:-}" \
          -e ANTHROPIC_API_KEY="${ANTHROPIC_API_KEY:-}" \
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
        
        echo "部署完成！"
        echo "容器状态："
        docker ps | grep jetbrainsai2api
        echo "日志查看命令: docker logs -f jetbrainsai2api"
        EOF
        
        chmod +x deploy.sh

    - name: Upload deployment script
      uses: actions/upload-artifact@v4
      with:
        name: deployment-script
        path: deploy.sh

  deploy-to-kubernetes:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Lowercase repository name
      run: echo "IMAGE_NAME=${GITHUB_REPOSITORY@L}" >> ${GITHUB_ENV}

    - name: Read version from file
      id: version
      run: echo "VERSION=$(cat version.txt | grep version= | cut -d= -f2)" >> $GITHUB_OUTPUT
      
    - name: Update Kubernetes deployment
      run: |
        # 更新deployment.yaml中的镜像版本，自动使用GitHub用户名
        sed -i "s|ghcr.io/[^/]*/|ghcr.io/${{ env.REPO_OWNER }}/|g" k8s/deployment.yaml
        sed -i "s|:.*|:${{ steps.version.outputs.VERSION }}|g" k8s/deployment.yaml
        
        echo "更新后的deployment.yaml镜像配置："
        grep "image:" k8s/deployment.yaml

    - name: Upload Kubernetes manifests
      uses: actions/upload-artifact@v4
      with:
        name: k8s-manifests-${{ steps.version.outputs.VERSION }}
        path: k8s/